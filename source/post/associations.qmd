---
title: "Associations with cluster membership"
author:
  - name: "Nathan Constantine-Cooke"
    corresponding: true
    url: https://scholar.google.com/citations?user=2emHWR0AAAAJ&hl=en&oi=ao
    affiliations:
      - ref: CGEM
      - ref: HGU
  - name: "Catalina A. Vallejos"
    url: https://scholar.google.com/citations?user=lkdrwm0AAAAJ&hl=en&oi=ao
    affiliations:
      - ref: HGU
---

## Introduction

```{R Setup}
#| message: false
set.seed(123)
if (file.exists("/.dockerenv")) { # Check if running in Docker
  # Assume igmm/cvallejo-predicct/libdr/ is passed to the data volume
  prefix <- "data/"
} else {
  # Assume running outside of a Docker container and the IGC(/IGMM) datastore is
  # mounted at /Volumes
  prefix <- "/Volumes/igmm/cvallejo-predicct/libdr/"
}

##########################
#--     Packages       --#
##########################

library(tidyverse)
library(dplyr)
# Support package (source found in libdr/)
library(libdr)
## Modelling ##
library(lcmm)
library(nnet) # Multinomial logistic regression
## Survival analysis
library(survival)
library(survminer)
## Presentation ##
library(patchwork)
library(ggdist)
library(ggalluvial)
library(pander)
library(qqplotr)
library(table1)
library(viridis)

library(ggmosaic)


dict <- readRDS(paste0(prefix, "processed/dict.RDS"))
fcal <- readRDS(paste0(prefix, "processed/fcal.RDS"))
model.fc <- readRDS(paste0(prefix, "/cache/fcal/ncs/fcal-8.RDS"))
crp <- readRDS(paste0(prefix, "processed/crp.RDS"))
crp.median <- readRDS(paste0(prefix, "processed/median-crp.RDS"))
model.crp <- readRDS(paste0(prefix, "cache/crp-ma/crp-8.RDS"))
```

This page explores potential associations between information available at
diagnosis, or shortly thereafter, and cluster membership. A descriptive analysis
of baseline variables in described in a
[previous page](../pre/baseline.qmd).

For univariate analyses, continuous data have been analysed via ANOVA, and
categorical data have been analysed using chi-squared or Fisher's exact test as
appropriate. Time-to-event data have been analysed using log-rank tests of 
Kaplan-Meier curves.

Multivariate analyses were also performed to potentially adjust for
confounding factors. 

As faecal calprotectin (FC) and C-reactive protein (CRP) were analysed
independently, this page is split into FC and CRP sections. 

## Faecal calprotectin analysis

### Merge subject-level metadata with model-derived quantities

Here, we create a `data.frame` that combines individual-level information
(e.g. age at diagnosis, sex) with model-derived quantities, such as the
posterior probabilities of class assignment. To facilitate visualisation, 
we also create discretised versions for some variables. 

```{r}
myDF.fc <- fcal %>%
  group_by(ids) %>%
  summarise(n.total = n(),
            followup = max(calpro_time),) %>%
  mutate(followup_cut = cut(followup, breaks = c(0, 4, 6, 7)),
         n.total_cut = cut(n.total, breaks = c(0, 5, 10, 20, max(n.total))))
  
myDF.fc <- merge(myDF.fc, model.fc$pprob, by = "ids", all.x = FALSE, all.y = TRUE)
myDF.fc <- myDF.fc %>% 
  mutate(probmax = pmax(prob1, prob2, prob3, prob4, 
                        prob5, prob6, prob7, prob8)) #, prob9, prob10))
myDF.fc <- merge(myDF.fc, dict, by = "ids", all.x = TRUE, all.y = FALSE)

myDF.fc <- myDF.fc %>%
  mutate(class_order = plyr::mapvalues(
    class, from = seq_len(8), to = c(7, 6, 4, 8, 1, 5, 2, 3))) %>%
  mutate(class_order = factor(
    class_order, levels = 1:8, labels = paste0("FC", 1:8))) %>%
  mutate(prob_order1 = prob5, prob_order2 = prob7,
         prob_order3 = prob8, prob_order4 = prob3,
         prob_order5 = prob6, prob_order6 = prob2,
         prob_order7 = prob1, prob_order8 = prob4)
```

### Uncertainty cluster assignment probabilities 

First, we calculate the proportion of individuals assigned to each cluster
with probability above 0.5.

```{r}
p1 <- myDF.fc %>% 
  group_by(class_order) %>%
  summarise(prop50 = 100*mean(probmax > 0.5),
            prop75 = 100*mean(probmax > 0.75)) %>%
  ggplot(aes(x = class_order, y = prop50)) +
  ylim(c(0,100)) +
  xlab("Assigned cluster") +
  ylab("% assigned with prob > 0.5") +
  geom_bar(stat = "identity") +
  theme_minimal()

p1 
```


Next, we calculate average posterior probabilities of cluster assignment. 

```{r}
myDF.fc_means <- myDF.fc %>% 
  group_by(class_order, followup_cut) %>%
  summarise(across(starts_with("prob_order"), function(x) mean(x, na.rm = TRUE)),
            .groups = "drop") %>%
  pivot_longer(cols = starts_with("prob_order"), names_to = "prob_order")
```

@fig-fc-prob-fup shows how cluster assignment probabilities change as follow-up
for subjects increases. As one would expect, probabilities typically increase as
as follow-up increases. This relationship appears to depend upon when the mean
trajectory for the assigned cluster substantially differs from the other
clusters. FC8 shows high posterior probabilities with even short follow-up as
this is the only cluster with low FC at diagnosis. However, longer follow-ups 
are required to distinguish other clusters. For example, individuals
assigned to FC6 that have a short follow-up (< 4 years from diagnosis) have, on 
average, a high probability of being assigned to FC3 instead 
(`r round(myDF.fc_means$value[myDF.fc_means$class_order == "FC6" & myDF.fc_means$followup_cut == "(0,4]" & myDF.fc_means$prob_order == "prob_order6"], 3)`
versus
`r round(myDF.fc_means$value[myDF.fc_means$class_order == "FC6" & myDF.fc_means$followup_cut == "(0,4]" & myDF.fc_means$prob_order == "prob_order3"], 3)`).
This is not unexpected, as FC3 and FC6 share similar patterns within the first
2 years.  


```{R}
#| label: fig-fc-prob-fup
#| fig-cap: "Demonstration of how mean posterior probabilities of cluster assignment for subjects changes based upon follow-up and assigned cluster."
#| column: body-outset
#| fig-width: 11
#| fig-height: 8


# Assign level order otherwise alphanumerical order used 
# and add sample sizes to labels
myDF.fc_means <- myDF.fc_means %>%
  mutate(prob_order = factor(prob_order,
                             levels = c(paste0("prob_order", 1:8)),
                             labels = c(paste0("FC", 1:8))),
         class_order = factor(class_order,
                              levels = paste0("FC", 1:8),
                              labels = paste0("Assigned to FC", 1:8, "\n n = ",
                                              as.vector(table(myDF.fc$class_order)))))



# col.vec <- c("#df5c7f",
# "#74c74a",
# "#d159d3",
# "#c2ae42",
# "#8581da",
# "#de6d3c",
# "#74b0c3",
# "#bc9d7a")
#"#6cb886",
#"#c597bd")



p2 <- myDF.fc_means %>%
  ggplot(aes(fill = prob_order, y = value, x = followup_cut)) +
  geom_bar(position = "fill", stat = "identity") +
  facet_wrap(.~class_order, ncol = 4) + 
  theme_minimal() +
  theme(legend.title = element_text(hjust = 0.5),
        strip.background = element_rect(color = "lightgray",
                                         linewidth = 1.5,
                                         linetype="solid")) +
  labs(x = "Follow-up cutoff (years)",
       y = "",
       fill = "Mean posterior\nprobability of\ncluster assignment") +
  scale_fill_viridis_d(option = "inferno") 

p2
# p + scale_fill_viridis_d(option = "D") 
# p + scale_fill_brewer(palette = "Blues")

ggsave("plots/fc-prob-fup.png", p2, width = 11, height = 8, units = "in")
ggsave("plots/fc-prob-fup.pdf", p2, width = 11, height = 8, units = "in")
p
```


### Associations with respect to cluster assignments

This section displays descriptive plots to summarize marginal associations
between cluster assignments and individual-level covariates. We also explore 
univariate and multivariate associations with respect to cluster assignment 
using multinomial logistic regression. As a sensitivity analysis, we also 
consider restricting the analysis to only consider individuals whose class 
assignment was less uncertain (with posterior probability > 0.5).

<!--- CAV: add here a table with summary statistics per cluster;
include, for each cluster, the proportion of individuals assigned with
prob > 0.5---> 

#### For all individuals

<!--- IBD type has been included in the cluster assignment sub model as a covariate
and will therefore be analysed differently to the other variables considered.
Instead of chi-squared tests, Wald tests of the model covariates were conducted.
In these tests, Crohn's disease is the reference IBD type with cluster FC 8
being the reference cluster. 

The results of these tests are presented as both forest plots ([@fig-fc-ibd])
and a summary table ([@tbl-fc-ibd]).

Only ulcerative colitis in cluster 1 was found to be statistically significant. 
--->

Here, we consider associations with respect to information available at 
diagnosis: age, sex and IBD type. 

```{r}
p_diagnosis_all <- myDF.fc %>%
  plotCat("diagnosis", class = "class_order") 

p_sex_all <- myDF.fc %>%
  plotCat("sex", class = "class_order")

p_age_all <- myDF.fc %>%
  ggplot(aes(x = class_order, y = age)) +
  geom_violin(fill = "#5DB7DE", color = "#434371") +
  geom_boxplot(width=0.1, color="black", alpha=0.2) +
  theme_minimal() +
  xlab("Cluster") +
  ylab("Age at diagnosis")

# p_baseline_fc <- myDF.fc %>%
#   ggplot(aes(x = class_order, y = baseline_fc)) +
#   geom_violin(fill = "#5DB7DE", color = "#434371") +
#   theme_minimal() +
#   xlab("Cluster") +
#   ylab("FC at diagnosis")

p_mlr_all <- myDF.fc %>%
  mutate(class_order = relevel(class_order, ref = "FC4")) %>%
  mlrPlot(var = c("diagnosis", "age", "sex"), class = "class_order") # , "baseline_fc"

# diagnosis
wrap_elements(p_diagnosis_all) +
  p_mlr_all$plot_multi$`diagnosisUlcerative Colitis` + p_mlr_all$plot_multi$`diagnosisIBDU` +
  patchwork::plot_annotation(tag_levels = "A", title = "All subjects - Multivariate CI") 

wrap_elements(p_diagnosis_all) +
  p_mlr_all$plot_uni$`diagnosisUlcerative Colitis` + p_mlr_all$plot_uni$`diagnosisIBDU` +
  patchwork::plot_annotation(tag_levels = "A", title = "All subjects - Univariate CI")

#age + sex + baseline_fc 
wrap_elements(p_age_all) + p_mlr_all$plot_multi$age + p_mlr_all$plot_uni$age +
  patchwork::plot_annotation(tag_levels = "A", 
                             title = "All subjects - B: Multivariate CI; C: Univariate CI")

wrap_elements(p_sex_all) + p_mlr_all$plot_multi$sex + p_mlr_all$plot_uni$sex +
  patchwork::plot_annotation(tag_levels = "A", 
                             title = "All subjects - B: Multivariate CI; C: Univariate CI")

# wrap_elements(p_baseline_fc) + p_mlr$plot_multi$baseline_fc + p_mlr$plot_uni$baseline_fc +
#   patchwork::plot_annotation(tag_levels = "A", 
#                              title = "All subjects - B: Multivariate CI; C: Univariate CI")
```

Restricted to those with posterior probability > 0.5

```{r}
p_diagnosis <- myDF.fc %>%
  filter(probmax > 0.5) %>%
  plotCat("diagnosis", class = "class_order") 

p_sex <- myDF.fc %>%
  filter(probmax > 0.5) %>%
  plotCat("sex", class = "class_order")

p_age <- myDF.fc %>%
  filter(probmax > 0.5) %>%
  ggplot(aes(x = class_order, y = age)) +
  geom_violin(fill = "#5DB7DE", color = "#434371") +
  geom_boxplot(width=0.1, color="black", alpha=0.2) +
  theme_minimal() +
  xlab("Cluster") +
  ylab("Age at diagnosis")

# p_baseline_fc <- myDF.fc %>%
#   filter(probmax > 0.5) %>%
#   ggplot(aes(x = class_order, y = baseline_fc)) +
#   geom_violin(fill = "#5DB7DE", color = "#434371") +
#   theme_minimal() +
#   xlab("Cluster") +
#   ylab("FC at diagnosis")

p_mlr <- myDF.fc %>%
  filter(probmax > 0.5) %>%
  mutate(class_order = relevel(class_order, ref = "FC4")) %>%
  mlrPlot(var = c("diagnosis", "age", "sex"), class = "class_order") # , "baseline_fc"

# diagnosis - Multivariate 
(wrap_elements(p_diagnosis_all) +
  p_mlr_all$plot_multi$`diagnosisUlcerative Colitis` + p_mlr_all$plot_multi$`diagnosisIBDU`) /
  (wrap_elements(p_diagnosis) +
    p_mlr$plot_multi$`diagnosisUlcerative Colitis` + p_mlr$plot_multi$`diagnosisIBDU`) +
  patchwork::plot_annotation(tag_levels = "A")

wrap_elements(p_diagnosis) +
  p_mlr$plot_uni$`diagnosisUlcerative Colitis` + p_mlr$plot_uni$`diagnosisIBDU` +
  patchwork::plot_annotation(tag_levels = "A", title = "Subjects prob > 0.5 - Univariate CI")

#age + sex + baseline_fc 
(wrap_elements(p_age_all) + p_mlr_all$plot_multi$age + p_mlr_all$plot_uni$age) / 
  (wrap_elements(p_age) + p_mlr$plot_multi$age + p_mlr$plot_uni$age) +
  patchwork::plot_annotation(tag_levels = "A")

(wrap_elements(p_sex_all) + p_mlr_all$plot_multi$sex + p_mlr_all$plot_uni$sex) /
  (wrap_elements(p_sex) + p_mlr$plot_multi$sex + p_mlr$plot_uni$sex) +
  patchwork::plot_annotation(tag_levels = "A")

# wrap_elements(p_baseline_fc) + p_mlr$plot_multi$baseline_fc + p_mlr$plot_uni$baseline_fc +
#   patchwork::plot_annotation(tag_levels = "A", 
#                              title = "Subjects prob > 0.5 - B: Multivariate CI; C: Univariate CI")
```

Some statistics to be used in the text:

```{r}
myDF.fc %>%
  mutate(class_aux = ifelse(class_order %in% c("FC6"), class_order, "Other")) %>%
  group_by(class_aux, diagnosis) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count) * 100))

myDF.fc %>%
  mutate(class_aux = ifelse(class_order %in% c("FC1", "FC8"), class_order, "Other")) %>%
  group_by(class_aux, diagnosis) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count) * 100))

myDF.fc %>%
  mutate(class_aux = ifelse(class_order %in% c("FC7"), class_order, "Other")) %>%
  group_by(class_aux, diagnosis) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count) * 100))
```

#### Crohn's disease only

For CD patients, we also consider additional phenotyping information and 
advance therapy usage. Due to small numbers, B2 and B3 are merged into a 
single group (complicated CD) when analysing Montreal behaviour. Upper GI 
inflammation (L4) was missing for a high proportion of individuals (approx 
`r round(mean(is.na(myDF.fc$L4)) * 100)`%. This is because the required 
investigations are only carried out where upper GI inflammation is suspected. 
As such, we have manually mapped missing L4 values as "No" (i.e. no upper GI 
inflammation for the associated patients). 

```{r}
myDF.fc <- myDF.fc %>%
  mutate(Behaviour_merged = plyr::mapvalues(Behaviour,
                                      from = c("B1", "B2", "B3", NA),
                                      to = c("B1", "B2 or B3", "B2 or B3", NA))) %>%
  mutate(L4 = ifelse(!is.na(L4), L4, "No")) %>%
  mutate(paeds = ifelse(age <= 16, "Yes", "No"))
```

For the purposes of the multinomial logistic regression model, individuals
with missing values in any of the considered variables will be excluded. 

```{r}
myDF.fc <- myDF.fc %>%
  mutate(missingN_cd = is.na(Smoke) + is.na(Location) + is.na(L4) + 
           is.na(Behaviour) + is.na(Perianal))

myDF.fc %>% 
  filter(diagnosis == "Crohn's Disease") %>% 
  count(missingN_cd)

myDF.fc %>% 
  filter(diagnosis == "Crohn's Disease") %>% 
  subset(missingN_cd == 1 & !is.na(Smoke))
```

Here is the code to explore the associations:

```{r}
p_sex_cd <- myDF.fc %>%
  filter(diagnosis == "Crohn's Disease") %>%
  plotCat("sex", class = "class_order")

p_age_cd <- myDF.fc %>%
  filter(diagnosis == "Crohn's Disease") %>%
  ggplot(aes(x = class_order, y = age)) +
  geom_violin(fill = "#5DB7DE", color = "#434371") +
  geom_boxplot(width=0.1, color="black", alpha=0.2) +
  theme_minimal() +
  xlab("Cluster") +
  ylab("Age at diagnosis")

p_paeds_cd <- myDF.fc %>%
  filter(diagnosis == "Crohn's Disease") %>%
  plotCat("paeds", class = "class_order")

# p_baseline_fc_cd <- myDF.fc %>%
#   filter(diagnosis == "Crohn's Disease") %>%
#   ggplot(aes(x = class_order, y = baseline_fc)) +
#   geom_violin(fill = "#5DB7DE", color = "#434371") +
#   theme_minimal() +
#   xlab("Cluster") +
#   ylab("FC at diagnosis")

p_smoke_cd <- myDF.fc %>%
  filter(diagnosis == "Crohn's Disease") %>%
  mutate(Smoke = ifelse(!is.na(Smoke), Smoke, "Missing")) %>%
  plotCat("Smoke", class = "class_order")

p_location_cd <- myDF.fc %>%
  filter(diagnosis == "Crohn's Disease") %>%
  mutate(Location = ifelse(!is.na(Location), Location, "Missing")) %>%
  plotCat("Location", class = "class_order")

p_L4_cd <- myDF.fc %>%
  filter(diagnosis == "Crohn's Disease") %>%
  mutate(L4 = ifelse(!is.na(L4), L4, "Missing")) %>%
  plotCat("L4", class = "class_order")

p_behaviour_cd <- myDF.fc %>%
  filter(diagnosis == "Crohn's Disease") %>%
  mutate(Behaviour = ifelse(!is.na(Behaviour_merged), Behaviour_merged, "Missing")) %>%
  plotCat("Behaviour", class = "class_order")

p_perianal_cd <- myDF.fc %>%
  filter(diagnosis == "Crohn's Disease") %>%
  mutate(Perianal = ifelse(!is.na(Perianal), Perianal, "Missing")) %>%
  plotCat("Perianal", class = "class_order")

#p_behaviour_p <- myDF.fc %>%
#  filter(diagnosis == "Crohn's Disease") %>%
#  mutate(Behaviour = ifelse(!is.na(Behaviour_merged), Behaviour_merged, "Missing")) %>%
#  mutate(Perianal = ifelse(!is.na(Perianal), Perianal, "Missing")) %>%
#  mutate(BehaviourP = as.factor(paste0(Behaviour, "-", Perianal))) %>%
#  plotCat("BehaviourP")

p_mlr_cd <- myDF.fc %>%
  filter(diagnosis == "Crohn's Disease") %>%
  filter(missingN_cd == 0) %>%
  mutate(class_order = relevel(class_order, ref = "FC8")) %>%
  mlrPlot(var = c("age", "sex", #"baseline_fc", 
                  "Smoke", "Location", "L4", "Behaviour_merged", "Perianal"), 
          class = "class_order")


wrap_elements(p_sex_cd) + p_mlr_cd$plot_multi$sex + p_mlr_cd$plot_uni$sex +
  plot_annotation(title = "Sex (CD patients only)")
wrap_elements(p_age_cd) + p_mlr_cd$plot_multi$age + p_mlr_cd$plot_uni$age +
  plot_annotation(title = "Age (CD patients only)")
# wrap_elements(p_baseline_fc_cd) + p_mlr_cd$plot_multi$baseline_fc + 
#   p_mlr_cd$plot_uni$baseline_fc +
#   plot_annotation(title = "Baseline_FC (CD patients only)")

wrap_elements(p_smoke_cd) + p_mlr_cd$plot_multi$SmokeYes + p_mlr_cd$plot_uni$SmokeYes +
  plot_annotation(title = "Smoking (CD patients only)")

wrap_elements(p_location_cd) + p_mlr_cd$plot_multi$LocationL2 + p_mlr_cd$plot_multi$LocationL3 + 
  plot_annotation(title = "Location (CD patients only) - multivariate CI")
wrap_elements(p_location_cd) + p_mlr_cd$plot_uni$LocationL2 + p_mlr_cd$plot_uni$LocationL3 + 
  plot_annotation(title = "Location (CD patients only) - multivariate CI")

wrap_elements(p_L4_cd) + p_mlr_cd$plot_multi$L4Yes + p_mlr_cd$plot_uni$L4Yes +
  plot_annotation(title = "L4 (CD patients only)")

wrap_elements(p_behaviour_cd) + p_mlr_cd$plot_multi$`Behaviour_mergedB2 or B3` +
  p_mlr_cd$plot_uni$`Behaviour_mergedB2 or B3` +
  plot_annotation(title = "Behaviour (CD patients only)")

wrap_elements(p_perianal_cd) + p_mlr_cd$plot_multi$PerianalYes + 
  p_mlr_cd$plot_uni$PerianalYes + 
  plot_annotation(title = "Perianal (CD patients only)")
```

#### Ulcerative Colitis only

```{r}
myDF.fc <- myDF.fc %>%
  mutate(missingN_uc = is.na(Smoke) + is.na(Extent))

myDF.fc %>% 
  filter(diagnosis == "Ulcerative Colitis") %>% 
  count(missingN_uc)

myDF.fc %>% 
  filter(diagnosis == "Ulcerative Colitis") %>% 
  subset(missingN_uc == 1 & !is.na(Smoke))
```


```{r}
p_sex_uc <- myDF.fc %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  plotCat("sex", class = "class")

p_age_uc <- myDF.fc %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  ggplot(aes(x = class, y = age)) +
  geom_violin(fill = "#5DB7DE", color = "#434371") +
  geom_boxplot(width=0.1, color="black", alpha=0.2) +
  theme_minimal() +
  xlab("Cluster") +
  ylab("Age at diagnosis")

p_paeds_uc <- myDF.fc %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  plotCat("paeds", class = "class")

p_baseline_fc_uc <- myDF.fc %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  ggplot(aes(x = class, y = baseline_fc)) +
  geom_violin(fill = "#5DB7DE", color = "#434371") +
  theme_minimal() +
  xlab("Cluster") +
  ylab("FC at diagnosis")

p_smoke_uc <- myDF.fc %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  mutate(Smoke = ifelse(!is.na(Smoke), Smoke, "Missing")) %>%
  plotCat("Smoke", class = "class")

p_extent_uc <- myDF.fc %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  mutate(Extent = ifelse(!is.na(Extent), Extent, "Missing")) %>%
  plotCat("Extent", class = "class")

p_mlr_uc <- myDF.fc %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  filter(missingN_uc == 0) %>%
  mutate(class = relevel(class, ref = "FC3")) %>%
  mlrPlot(var = c("age", "sex", "baseline_fc", "Smoke", "Extent"),
          class = "class")

wrap_elements(p_sex_uc) + p_mlr_uc$plot_multi$sex + p_mlr_uc$plot_uni$sex + 
  plot_annotation(title = "Sex (UC patients only)")

wrap_elements(p_age_uc) + p_mlr_uc$plot_multi$age + p_mlr_uc$plot_uni$age +
  plot_annotation(title = "Age (UC patients only)")

wrap_elements(p_baseline_fc_uc) + p_mlr_uc$plot_multi$baseline_fc + 
  p_mlr_uc$plot_uni$baseline_fc +
  plot_annotation(title = "Baseline_FC (UC patients only)")

wrap_elements(p_smoke_uc) + p_mlr_uc$plot_multi$SmokeYes + p_mlr_uc$plot_uni$SmokeYes + 
  plot_annotation(title = "Smoking (UC patients only)")

wrap_elements(p_extent_uc) + p_mlr_uc$plot_multi$ExtentE2 + p_mlr_uc$plot_multi$ExtentE3 + 
  plot_annotation(title = "Extent (UC patients only) - Multivariate CI")

wrap_elements(p_extent_uc) + p_mlr_uc$plot_uni$ExtentE2 + p_mlr_uc$plot_uni$ExtentE3 + 
  plot_annotation(title = "Extent (UC patients only) - Univariate CI")
```

#### Combined plots

```{r}
(wrap_elements(p_sex_cd) + p_mlr_cd$plot$sex) /
  (wrap_elements(p_sex_uc) + p_mlr_uc$plot$sex) +
  plot_annotation(title = "Sex (top = CD; bottom = UC)")

(wrap_elements(p_age_cd) + p_mlr_cd$plot$age) /
  (wrap_elements(p_age_uc) + p_mlr_uc$plot$age) +
  plot_annotation(title = "Age (top = CD; bottom = UC)")
```


```{R}
myDF.fc %>% 
  filter(probmax_combined > 0.5) %>%
  filter(diagnosis == "Crohn's Disease") %>%
  mlrPlot(var = c("sex"))
```

##### Ulcerative colitis

```{r}
p1 <- myDF.fc %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  plotCat("sex") +
  plot_annotation(title = "All subjects")

p2 <- myDF.fc %>%
  filter(probmax_combined > 0.5) %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  plotCat("sex") + 
  plot_annotation(title = "All subjects with prob > 0.5")

wrap_elements(p1) / wrap_elements(p2) + plot_layout(ncol = 2)
```

```{R}
myDF.fc %>% 
  filter(probmax_combined > 0.5) %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  mlrPlot(var = "sex")
```

#### Age

As a reminder, age has been calculated by subtracting year of diagnosis from
year of birth and is therefore not 100% accurate. We will initially consider
age as a continuous variable. 

```{R}
aov(age ~ class_combined , data = myDF.fc) %>%
  summary() %>%
  pander()

aov(age ~ class_combined , data = myDF.fc[myDF.fc$probmax_combined > 0.5,]) %>%
  summary() %>%
  pander()
```


```{R}
#| label: fig-fc-age-dist
#| fig-cap: "Distribution of age at diagnosis by FC cluster assignment."
#| fig-height: 4
#| fig-width: 9.142857
#| warning: false
p1 <- myDF.fc %>%
  ggplot(aes(x = class_combined, y = age)) +
  geom_violin(fill = "#5DB7DE", color = "#434371") +
  theme_minimal() +
  xlab("Cluster") +
  ylab("Age at diagnosis")

p2 <- myDF.fc %>%
  subset(probmax_combined > 0.5) %>%
  ggplot(aes(x = class_combined, y = age)) +
  geom_violin(fill = "#5DB7DE", color = "#434371") +
  theme_minimal() +
  xlab("Cluster") +
  ylab("Age at diagnosis")

print(p1)
```


##### All

```{R}
myDF.fc %>% 
  filter(probmax_combined > 0.5) %>%
  mlrPlot(var = "age")
```

##### Crohn's disease

```{R}
myDF.fc %>% 
  filter(probmax_combined > 0.5) %>%
  filter(diagnosis == "Crohn's Disease") %>%
  mlrPlot(var = "age")
```


##### Ulcerative colitis

```{R}
myDF.fc %>% 
  filter(probmax_combined > 0.5) %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  mlrPlot(var = "age")
```

##### Montreal classification of age for Crohn's disease

Unlike ulcerative colitis, age at diagnosis is part of the Montreal
classification for Crohn's disease.  As such, we will explore potential
associations between Montreal age classification and cluster membership for
subjects diagnosed with Crohn's disease. The Montreal age categories are as
follows: 

* A1: $\leq$ 16 years
* A2: 17—40 years
* A3: $>$ 40 years

Montreal classification of age for Crohn's disease was not found to be
significantly associated with cluster membership.

```{R}
ageLabels <- c("\u226416", "17—40", "> 40")

myDF.fc.cd <- subset(myDF.fc, diagnosis == "Crohn's Disease")

myDF.fc.cd$ageCat <- cut(myDF.fc.cd$age,
  breaks = c(0, 16, 40, Inf),
  labels = ageLabels,
  include.lowest = TRUE,
  right = FALSE
)

myDF.fc.cd %>%
  filter(probmax_combined > 0.5) %>%
  with(fisher.test(class_combined,
                   ageCat,
                   workspace = 2000000,
                   simulate.p.value = TRUE)) %>%
  pander()
```

```{R}
myDF.fc.cd %>%
  filter(probmax_combined > 0.5) %>%
  mlrPlot(var = "ageCat")
```




### Multivariate modelling

For the multivariate analysis, multinomial logistic regression has been used to
predict class membership via age (as a continuous variable), sex, and IBD type.

Cluster FC 1, female sex, and Crohn's disease were used as the reference
categories. @tbl-mlr-fc provides all p-values for all covariates.

```{R}
#| label: tbl-mlr-fc
#| tbl-cap: "Table of p-values for the Wald tests of the multinomial logistic regression model."

myDF.fc %>%
  mutate(class_combined = relevel(class_combined, ref = "FC10 (n = 209)")) %>%
  filter(probmax_combined > 0.5) %>%
  mlrPlot(var = c("age", "sex", "diagnosis", "baseline_fc"))
```

### Crohn's disease only data

This section is concerned with data specific to Crohn's disease, namely the
Montreal classification of Crohn's disease and advanced therapy prescribing. 

```{R}
cd.pheno <- readRDS(paste0(prefix, "processed/cd-pheno.RDS"))
cd.pheno <- merge(cd.pheno,
  myDF.fc[, c("ids", "class_combined", "probmax_combined")],
  by = "ids",
  all.x = FALSE,
  all.y = FALSE
)
```

#### Montreal location

Montreal location refers to where gastrointestinal inflammation is present and
is categorised as:

* L1: Ileal, limited to the ileum which is the final segment of the small
  intestine.
* L2: Colonic, limited to the colon/large intestine.
* L3: Ileocolonic, inflammation is present in both the ileum and colon.

A significant association was not found between cluster membership and Montreal
location. 


```{R}
cd.pheno %>%
  filter(probmax_combined > 0.5) %>%
  with(chisq.test(class_combined, Location)) %>%
  pander()
```

```{R}
#| label: fig-fc-location-facet
#| fig-cap: "Percentage of (A) L1, (B) L2, and (C) L3 within each FC cluster. Dotted lines indicate the overall percentage of each IBD type."
p <- plotCat(cd.pheno, "Location")
ggsave("plots/cd-location-fc.png", p, width = 7.5, height = 7.5)
ggsave("plots/cd-location-fc.pdf", p, width = 7.5, height = 7.5)
print(p)
```

```{R}
cd.pheno %>%
  filter(probmax_combined > 0.5) %>%
  mlrPlot(var = "Location")
```

#### Upper GI inflammation

Upper inflammation refers to any gastrointestinal inflammation further up than
the ileum. Usually, upper inflammation is considered a _modifier_ for Montreal
location and is denoted L4. 

The presence of upper GI inflammation was found to be significantly associated
with cluster membership. 

```{R}
cd.pheno %>%
  filter(probmax_combined > 0.5) %>%
  with(fisher.test(class_combined, L4, workspace = 200000000)) %>%
  pander()
```

Cluster FC 2 appears to be enriched for CD subjects with L4 whilst a very low
percentage of CD subjects in FC 4 have L4.

```{R}
cd.pheno %>%
  drop_na(L4) %>%
  ggplot(aes(x = class_combined, fill = L4, color = L4)) +
  geom_bar(position = "fill") +
  scale_fill_manual(values = c("#F8766D", "#619CFF")) +
  scale_color_manual(values = c("#CF544B", "#417BD2")) +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_y_continuous(labels = scales::percent) +
  labs(
    x = "Cluster",
    y = "",
    fill = "L4 present",
    color = "L4 present"
  )
```


```{R}
cd.pheno %>%
  filter(probmax_combined > 0.5) %>%
  mlrPlot(var = "L4")
```

#### Montreal behaviour

Montreal behaviour describes another clinical phenotype and is defined as
follows:

* B1: Inflammatory, in other words non-stricturing and non-penetrating
* B2: Stricturing, where the formation of fibrosis leads to the narrowing of the
  intestine.
* B3: Penetrating, where the inflammation causes the formation of fistulas or
  abscesses.

Montreal behaviour was found to be significantly associated with cluster
membership at the 5% significance level.

```{R}
cd.pheno %>%
  filter(probmax_combined > 0.5) %>%
  with(fisher.test(class_combined, Behaviour, simulate.p.value = TRUE)) %>%
  pander()
```

Whilst the inflammatory phenotype appears to be mostly evenly distributed across
the clusters, substantial differences are seen for stricturing disease and even
starker differences for penetrating. 

```{R}
#| label: fig-fc-behaviour-facet
#| fig-cap: "Percentage of (A) B1, (B) B2, and (C) B3 within each FC cluster. Dotted lines indicate the overall percentage of each IBD type."
p <- plotCat(cd.pheno, "Behaviour")
ggsave("plots/cd-behaviour-fc.png", p, width = 7.5, height = 7.5)
ggsave("plots/cd-behaviour-fc.pdf", p, width = 7.5, height = 7.5)
print(p)
```

```{R}
cd.pheno %>%
  filter(probmax_combined > 0.5) %>%
  mlrPlot(var = "Behaviour")
```

#### Perianal disease

Perianal disease is considered a modifier for Montreal behaviour and is a severe
complication of Crohn's disease involving inflammation around the anus.

Presence of perianal disease was not found to be significantly associated with
cluter membership for CD subjects. 

```{R}
cd.pheno %>%
  filter(probmax_combined > 0.5) %>%
  with(fisher.test(class_combined, Perianal, workspace = 20000000)) %>%
  pander()
```


```{R}
cd.pheno %>%
  drop_na(Perianal) %>%
  ggplot(aes(x = class_combined, fill = Perianal, color = Perianal)) +
  geom_bar(position = "fill") +
  scale_fill_manual(values = c("#F8766D", "#619CFF")) +
  scale_color_manual(values = c("#CF544B", "#417BD2")) +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_y_continuous(labels = scales::percent) +
  labs(
    x = "Cluster",
    y = "",
    fill = "Perianal disease present",
    color = "Perianal disease present"
  )
```

```{R}
cd.pheno %>%
  filter(probmax_combined > 0.5) %>%
  mlrPlot(var = "Perianal")
```

### Advanced therapy in CD

```{R}
dict.fc.cd <- dict %>%
  filter(ids %in% fcal$ids) %>%
  filter(diagnosis == "Crohn's Disease")
```

#### All lines

```{R}
fc.cd.at <- reshape2::melt(dict.fc.cd,
                           id.vars = "ids",
                           measure.vars = paste0("AT_line_", seq(1, 8)),
                           variable.name = "Line") %>%
  drop_na(value)
fc.cd.at$Line <- as.factor(str_replace(fc.cd.at$Line, "AT_line_", ""))

myDF.fc.cd <- subset(myDF.fc, diagnosis == "Crohn's Disease")

fc.cd.at <- merge(fc.cd.at,
                  myDF.fc[, c("ids", "class")],
                  by = "ids",
                  all.x = TRUE,
                  all.y = FALSE)

scaling <- table(fc.cd.at$class)/table(myDF.fc.cd$class)

time.pred <- seq(0, 7, by = 0.01)

pred.fc.df <- data.frame(
      calpro_time = c(time.pred, time.pred),
      diagnosis = c(
        rep("Crohn's Disease", length(time.pred)),
        rep("Ulcerative Colitis", length(time.pred))
      )
    )
pred.fc.df.update <- lcmm::predictY(model.fc,
                                    pred.fc.df,
                                    var.time = "calpro_time",
                                    draws = TRUE
                                    )$pred

pred <- predictY(model.fc, pred.fc.df, var.time = "calpro_time", draws = TRUE)$pred

pred <- as.data.frame(pred[1:length(time.pred), ])
pred$time <- time.pred

plots <- list()

ylimit <- log(2500)
title.mapping <- c(7, 6, 4, 8, 1, 5, 2, 3)


for (g in 1:8) {
  prediction <- pred[, c(g, g + 8, g + 16, 25)]
  names(prediction) <- c("mean", "lower", "upper", "time")

  scaler <- scaling[[g]]

  temp <- fc.cd.at %>%
    filter(class == paste0(g)) %>%
    filter(value < 7) 
  
  dens <- density(temp$value, kernel = "gaussian", from = 0, to = 7)
  dens$y <- dens$y / max(dens$y) # Scale density to 1
  dens <- data.frame(x = dens$x, y = dens$y)
  dens$y <- dens$y * scaler * 4
  
  plots[[g]] <- dens %>%
    ggplot() +
    geom_area(aes(x = x,
                  y = y),
                 fill = "#AB87FF",
                 color =  "#7903F0",
                 linewidth = 1.2,
                 lty = 3,
                 alpha = 0.7) + 
    geom_line(aes(x = time, y = mean),
              prediction,
              color = "red",
              linewidth = 1.2) +
    geom_hline(yintercept = log(250), lty = 2, color =  "#007add") +
    scale_y_continuous(
      name = "Log (FC (\u03BCg/g))",
      limits = c(0, ylimit),
      sec.axis = sec_axis(transform = ~./ylimit,
                          name = "Advanced therapy density")) +
    theme_minimal() +
    theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5))  +
    xlab("Time (years)") +
    ggtitle(paste0("FC", title.mapping[g]))
}

mapping <- c(5, 7, 8, 3, 6, 2, 1, 4)

for (i in 1:8) {
  if (i == 1) {
    p <- plots[[mapping[i]]]
  } else {
    p <- p + plots[[mapping[i]]]
  }
}

p <- p + plot_layout(ncol = 2)
ggsave("plots/fc-cd-at.png", p, width = 10, height = 14, units = "in")
p
```


```{R}
fc.cd.at <- reshape2::melt(dict.fc.cd,
                           id.vars = "ids",
                           measure.vars = paste0("AT_line_", seq(1, 8)),
                           variable.name = "Line") %>%
  drop_na(value)
fc.cd.at$Line <- as.factor(str_replace(fc.cd.at$Line, "AT_line_", ""))

myDF.fc.cd <- subset(myDF.fc, diagnosis == "Crohn's Disease")


fc.cd.at <- merge(fc.cd.at,
                  myDF.fc[, c("ids", "class")],
                  by = "ids",
                  all.x = TRUE,
                  all.y = FALSE)


time.pred <- seq(0, 7, by = 0.01)

pred.fc.df <- data.frame(
      calpro_time = c(time.pred, time.pred),
      diagnosis = c(
        rep("Crohn's Disease", length(time.pred)),
        rep("Ulcerative Colitis", length(time.pred))
      )
    )
pred.fc.df.update <- lcmm::predictY(model.fc,
                                    pred.fc.df,
                                    var.time = "calpro_time",
                                    draws = TRUE
                                    )$pred

pred <- predictY(model.fc, pred.fc.df, var.time = "calpro_time", draws = TRUE)$pred

pred <- as.data.frame(pred[1:length(time.pred), ])
pred$time <- time.pred

plots <- list()

ylimit <- log(2500)
title.mapping <- c(7, 6, 4, 8, 1, 5, 2, 3)


for (g in 1:8) {
  prediction <- pred[, c(g, g + 8, g + 16, 25)]
  names(prediction) <- c("mean", "lower", "upper", "time")


  temp <- fc.cd.at %>%
    filter(class == paste0(g)) %>%
    filter(value < 7) 
  
  
  temp %>% 
    summarise()
  
  
  
  
  
  
  plots[[g]] <- temp %>%
    ggplot() +
    geom_histogram(aes(x = value, y = after_stat(count)),
                   fill = "#AB87FF",
                   color =  "#7903F0") + 
    geom_line(aes(x = time, y = mean),
              prediction,
              color = "red",
              linewidth = 1.2) +
    geom_hline(yintercept = log(250), lty = 2, color =  "#007add") +
    scale_y_continuous(
      name = "Log (FC (\u03BCg/g))",
      limits = c(0, ylimit),
      sec.axis = sec_axis(transform = ~./ylimit,
                          name = "Advanced therapy density")) +
    theme_minimal() +
    theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5))  +
    xlab("Time (years)") +
    ggtitle(paste0("FC", title.mapping[g]))
}

mapping <- c(5, 7, 8, 3, 6, 2, 1, 4)

for (i in 1:8) {
  if (i == 1) {
    p <- plots[[mapping[i]]]
  } else {
    p <- p + plots[[mapping[i]]]
  }
}

p <- p + plot_layout(ncol = 2)
ggsave("plots/fc-cd-at-hist.png", p, width = 10, height = 14, units = "in")
p
```

#### First-line only

```{R}
myDF.fc.cd <- subset(myDF.fc, diagnosis == "Crohn's Disease")
fc.cd.at <- fc.cd.at %>%
  filter(Line == 1)

scaling <- table(fc.cd.at$class)/table(myDF.fc.cd$class)

time.pred <- seq(0, 7, by = 0.01)

pred.fc.df <- data.frame(
      calpro_time = c(time.pred, time.pred),
      diagnosis = c(
        rep("Crohn's Disease", length(time.pred)),
        rep("Ulcerative Colitis", length(time.pred))
      )
    )
pred.fc.df.update <- lcmm::predictY(model.fc,
                                    pred.fc.df,
                                    var.time = "calpro_time",
                                    draws = TRUE
                                    )$pred

pred <- predictY(model.fc, pred.fc.df, var.time = "calpro_time", draws = TRUE)$pred

pred <- as.data.frame(pred[1:length(time.pred), ])
pred$time <- time.pred

plots <- list()

ylimit <- log(2500)
title.mapping <- c(7, 6, 4, 8, 1, 5, 2, 3)


for (g in 1:8) {
  prediction <- pred[, c(g, g + 8, g + 16, 25)]
  names(prediction) <- c("mean", "lower", "upper", "time")

  scaler <- scaling[[g]]

  temp <- fc.cd.at %>%
    filter(class == paste0(g)) %>%
    filter(value < 7) 
  
  dens <- density(temp$value, kernel = "gaussian", from = 0, to = 7)
  dens$y <- dens$y / max(dens$y) # Scale density to 1
  dens <- data.frame(x = dens$x, y = dens$y)
  dens$y <- dens$y * scaler * 4
  
  plots[[g]] <- dens %>%
    ggplot() +
    geom_area(aes(x = x,
                  y = y),
                 fill = "#AB87FF",
                 color =  "#7903F0",
                 linewidth = 1.2,
                 lty = 3,
                 alpha = 0.7) + 
    geom_line(aes(x = time, y = mean),
              prediction,
              color = "red",
              linewidth = 1.2) +
    geom_hline(yintercept = log(250), lty = 2, color =  "#007add") +
    scale_y_continuous(
      name = "Log (FC (\u03BCg/g))",
      limits = c(0, ylimit),
      sec.axis = sec_axis(transform = ~./ylimit,
                          name = "Advanced therapy density")) +
    theme_minimal() +
    theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5))  +
    xlab("Time (years)") +
    ggtitle(paste0("FC", title.mapping[g]))
}

mapping <- c(5, 7, 8, 3, 6, 2, 1, 4)

for (i in 1:8) {
  if (i == 1) {
    p <- plots[[mapping[i]]]
  } else {
    p <- p + plots[[mapping[i]]]
  }
}

p <- p + plot_layout(ncol = 2)
ggsave("plots/fc-cd-at-firstline.png", p, width = 10, height = 14, units = "in")
p
```


```{R}
dict.fc.cd <- subset(myDF.fc, diagnosis == "Crohn's Disease" & ids %in% fcal$ids)

#Apply censoring
dict.fc.cd <- dict.fc.cd %>%
  mutate(AT_line_1  = if_else(AT == 0, 7, as.numeric(AT_line_1 ))) %>%
  mutate(AT = if_else(AT_line_1 > 7, 0, 1)) %>%
  mutate(AT_line_1 = if_else(AT_line_1  > 7, 7, AT_line_1),
         AT = if_else(AT_line_1 == 7, 0, AT))
survfit(Surv(AT_line_1, AT) ~ class_order, data = dict.fc.cd) %>%
  ggsurvplot(pval = TRUE)
```

```{R}
#| echo: false
png("plots/at-survival-fc-ci.png",
  width = 7,
  height = 5,
  units = "in",
  res = 300
)
survfit(Surv(AT_line_1, AT) ~ class_order, data = dict.fc.cd) %>%
  ggsurvplot(pval = TRUE, conf.int = TRUE)
invisible(dev.off())
```

### Advanced therapy in UC

#### All lines

```{R}
dict.fc.uc <- dict %>%
  filter(ids %in% fcal$ids) %>%
  filter(diagnosis == "Ulcerative Colitis")
```

```{R}
fc.uc.at <- reshape2::melt(dict.fc.uc,
                           id.vars = "ids",
                           measure.vars = paste0("AT_line_", seq(1, 8)),
                           variable.name = "Line") %>%
  drop_na(value) %>%
  mutate(value = as.numeric(value))
fc.uc.at$Line <- as.factor(str_replace(fc.uc.at$Line, "AT_line_", ""))

myDF.fc.uc <- subset(myDF.fc, diagnosis == "Ulcerative Colitis")


fc.uc.at <- merge(fc.uc.at,
                  myDF.fc[, c("ids", "class")],
                  by = "ids",
                  all.x = TRUE,
                  all.y = FALSE)

scaling <- table(fc.uc.at$class)/table(myDF.fc.uc$class)

time.pred <- seq(0, 7, by = 0.01)

pred.fc.df <- data.frame(
      calpro_time = c(time.pred, time.pred),
      diagnosis = c(
        rep("Crohn's Disease", length(time.pred)),
        rep("Ulcerative Colitis", length(time.pred))
      )
    )
pred.fc.df.update <- lcmm::predictY(model.fc,
                                    pred.fc.df,
                                    var.time = "calpro_time",
                                    draws = TRUE
                                    )$pred

pred <- predictY(model.fc, pred.fc.df, var.time = "calpro_time", draws = TRUE)$pred

pred <- as.data.frame(pred[1:length(time.pred), ])
pred$time <- time.pred

plots <- list()

ylimit <- log(2500)
title.mapping <- c(7, 6, 4, 8, 1, 5, 2, 3)


for (g in 1:8) {
  prediction <- pred[, c(g, g + 8, g + 16, 25)]
  names(prediction) <- c("mean", "lower", "upper", "time")

  scaler <- scaling[[g]]

  temp <- fc.uc.at %>%
    filter(class == paste0(g)) %>%
    filter(value < 7) 
  
  dens <- density(temp$value, kernel = "gaussian", from = 0, to = 7)
  dens$y <- dens$y / max(dens$y) # Scale density to 1
  dens <- data.frame(x = dens$x, y = dens$y)
  dens$y <- dens$y * scaler * 4
  
  plots[[g]] <- dens %>%
    ggplot() +
    geom_area(aes(x = x,
                  y = y),
                 fill = "#AB87FF",
                 color =  "#7903F0",
                 linewidth = 1.2,
                 lty = 3,
                 alpha = 0.7) + 
    geom_line(aes(x = time, y = mean),
              prediction,
              color = "red",
              linewidth = 1.2) +
    geom_hline(yintercept = log(250), lty = 2, color =  "#007add") +
    scale_y_continuous(
      name = "Log (FC (\u03BCg/g))",
      limits = c(0, ylimit),
      sec.axis = sec_axis(transform = ~./ylimit,
                          name = "Advanced therapy density")) +
    theme_minimal() +
    theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5))  +
    xlab("Time (years)") +
    ggtitle(paste0("FC", title.mapping[g]))
}


mapping <- c(5, 7, 8, 3, 6, 2, 1, 4)

for (i in 1:8) {
  if (i == 1) {
    p <- plots[[mapping[i]]]
  } else {
    p <- p + plots[[mapping[i]]]
  }
}

p <- p + plot_layout(ncol = 2)
ggsave("plots/fc-uc-at.png", p, width = 10, height = 14, units = "in")
p
```


#### First-line only

```{R}
myDF.fc.uc <- subset(myDF.fc, diagnosis == "Ulcerative Colitis")
fc.uc.at <- fc.uc.at %>%
  filter(Line == 1)

scaling <- table(fc.uc.at$class)/table(myDF.fc.uc$class)

time.pred <- seq(0, 7, by = 0.01)

pred.fc.df <- data.frame(
      calpro_time = c(time.pred, time.pred),
      diagnosis = c(
        rep("Crohn's Disease", length(time.pred)),
        rep("Ulcerative Colitis", length(time.pred))
      )
    )
pred.fc.df.update <- lcmm::predictY(model.fc,
                                    pred.fc.df,
                                    var.time = "calpro_time",
                                    draws = TRUE
                                    )$pred

pred <- predictY(model.fc, pred.fc.df, var.time = "calpro_time", draws = TRUE)$pred

pred <- as.data.frame(pred[1:length(time.pred), ])
pred$time <- time.pred

plots <- list()

ylimit <- log(2500)
title.mapping <- c(7, 6, 4, 8, 1, 5, 2, 3)


for (g in 1:8) {
  prediction <- pred[, c(g, g + 8, g + 16, 25)]
  names(prediction) <- c("mean", "lower", "upper", "time")

  scaler <- scaling[[g]]

  temp <- fc.uc.at %>%
    filter(class == paste0(g)) %>%
    filter(value < 7) 
  
  dens <- density(temp$value, kernel = "gaussian", from = 0, to = 7)
  dens$y <- dens$y / max(dens$y) # Scale density to 1
  dens <- data.frame(x = dens$x, y = dens$y)
  dens$y <- dens$y * scaler * 4
  
  plots[[g]] <- dens %>%
    ggplot() +
    geom_area(aes(x = x,
                  y = y),
                 fill = "#AB87FF",
                 color =  "#7903F0",
                 linewidth = 1.2,
                 lty = 3,
                 alpha = 0.7) + 
    geom_line(aes(x = time, y = mean),
              prediction,
              color = "red",
              linewidth = 1.2) +
    geom_hline(yintercept = log(250), lty = 2, color =  "#007add") +
    scale_y_continuous(
      name = "Log (FC (\u03BCg/g))",
      limits = c(0, ylimit),
      sec.axis = sec_axis(transform = ~./ylimit,
                          name = "Advanced therapy density")) +
    theme_minimal() +
    theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5))  +
    xlab("Time (years)") +
    ggtitle(paste0("FC", title.mapping[g]))
}


mapping <- c(5, 7, 8, 3, 6, 2, 1, 4)

for (i in 1:8) {
  if (i == 1) {
    p <- plots[[mapping[i]]]
  } else {
    p <- p + plots[[mapping[i]]]
  }
}

p <- p + plot_layout(ncol = 2)
ggsave("plots/fc-uc-at-firstline.png", p, width = 10, height = 14, units = "in")
p
```

```{R}
dict.fc.uc <- subset(myDF.fc, diagnosis == "Ulcerative Colitis" & ids %in% fcal$ids)

#Apply censoring
dict.fc.uc <- dict.fc.uc %>%
  mutate(AT_line_1  = if_else(AT == 0, 7, as.numeric(AT_line_1 ))) %>%
  mutate(AT = if_else(AT_line_1 > 7, 0, 1)) %>%
  mutate(AT_line_1 = if_else(AT_line_1  > 7, 7, AT_line_1),
         AT = if_else(AT_line_1 == 7, 0, AT))
survfit(Surv(AT_line_1, AT) ~ class_order, data = dict.fc.uc) %>%
  ggsurvplot(pval = TRUE)
```

### Advanced therapy for CD and UC 

#### All lines

```{R}

```

```{R}
dict.fc <- dict %>%
  filter(ids %in% fcal$ids) %>%
  filter(diagnosis == "Crohn's Disease" | diagnosis == "Ulcerative Colitis")
```

```{R}
fc.at <- reshape2::melt(dict.fc,
                        id.vars = "ids",
                        measure.vars = paste0("AT_line_", seq(1, 8)),
                        variable.name = "Line") %>%
  drop_na(value) %>%
  mutate(value = as.numeric(value))
fc.at$Line <- as.factor(str_replace(fc.at$Line, "AT_line_", ""))

myDF.fc.temp <- subset(myDF.fc, diagnosis == "Crohn's Disease" |
                         diagnosis == "Ulcerative Colitis")


fc.at <- merge(fc.at,
               myDF.fc[, c("ids", "class")],
               by = "ids",
               all.x = TRUE,
               all.y = FALSE)

scaling <- table(fc.at$class)/table(myDF.fc.temp$class)

time.pred <- seq(0, 7, by = 0.01)

pred.fc.df <- data.frame(
      calpro_time = c(time.pred, time.pred),
      diagnosis = c(
        rep("Crohn's Disease", length(time.pred)),
        rep("Ulcerative Colitis", length(time.pred))
      )
    )
pred.fc.df.update <- lcmm::predictY(model.fc,
                                    pred.fc.df,
                                    var.time = "calpro_time",
                                    draws = TRUE
                                    )$pred

pred <- predictY(model.fc, pred.fc.df, var.time = "calpro_time", draws = TRUE)$pred

pred <- as.data.frame(pred[1:length(time.pred), ])
pred$time <- time.pred

plots <- list()

ylimit <- log(2500)
title.mapping <- c(7, 6, 4, 8, 1, 5, 2, 3)


for (g in 1:8) {
  prediction <- pred[, c(g, g + 8, g + 16, 25)]
  names(prediction) <- c("mean", "lower", "upper", "time")

  scaler <- scaling[[g]]

  temp <- fc.at %>%
    filter(class == paste0(g)) %>%
    filter(value < 7) 
  
  dens <- density(temp$value, kernel = "gaussian", from = 0, to = 7)
  dens$y <- dens$y / max(dens$y) # Scale density to 1
  dens <- data.frame(x = dens$x, y = dens$y)
  dens$y <- dens$y * scaler * 4
  
  plots[[g]] <- dens %>%
    ggplot() +
    geom_area(aes(x = x,
                  y = y),
                 fill = "#AB87FF",
                 color =  "#7903F0",
                 linewidth = 1.2,
                 lty = 3,
                 alpha = 0.7) + 
    geom_line(aes(x = time, y = mean),
              prediction,
              color = "red",
              linewidth = 1.2) +
    geom_hline(yintercept = log(250), lty = 2, color =  "#007add") +
    scale_y_continuous(
      name = "Log (FC (\u03BCg/g))",
      limits = c(0, ylimit),
      sec.axis = sec_axis(transform = ~./ylimit,
                          name = "Advanced therapy density")) +
    theme_minimal() +
    theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5))  +
    xlab("Time (years)") +
    ggtitle(paste0("FC", title.mapping[g], "CD: "))
}


mapping <- c(5, 7, 8, 3, 6, 2, 1, 4)

for (i in 1:8) {
  if (i == 1) {
    p <- plots[[mapping[i]]]
  } else {
    p <- p + plots[[mapping[i]]]
  }
}

p <- p + plot_layout(ncol = 2)
ggsave("plots/fc-at.png", p, width = 10, height = 14, units = "in")
p
```


W/ Density

```{R}
dens.cd.big <- data.frame(x = numeric(),
                          y = numeric(),
                          CumulativeY = numeric(),
                          class = character())


dens.uc.big <- data.frame(x = numeric(),
                          y = numeric(),
                          CumulativeY = numeric(),
                          class = character())


km.df <- data.frame(time = numeric(),
                    cumhaz = numeric(),
                    class = character(),
                    diag = character())

for (g in 1:8) {
  temp.cd <- myDF.fc %>%
    filter(class_order == paste0("FC", g)) %>%
    filter(diagnosis == "Crohn's Disease")
  
  
  temp.cd  <- temp.cd  %>%
    mutate(AT_line_1 = if_else(AT == 0, 7, as.numeric(AT_line_1))) %>%
    mutate(AT = if_else(AT_line_1 >= 7, 0, AT)) %>%
    mutate(AT_line_1  = if_else(AT_line_1  > 7, 7, AT_line_1)) %>%
    mutate(AT_line_1 = if_else(AT_line_1 < 0, 0, AT_line_1))
  
  km <- survfit(Surv(AT_line_1, AT) ~ 1, data = temp.cd)
  km.df <- rbind(km.df,
                 data.frame(time = km$time,
                            cumhaz =  1 - km$surv,
                            class = paste0("FC", g),
                            diag = "CD"))
  
  
  temp.uc <- myDF.fc %>%
    filter(class_order == paste0("FC", g)) %>%
    filter(diagnosis == "Ulcerative Colitis")
  

  temp.uc  <- temp.uc  %>%
    mutate(AT_line_1 = if_else(AT == 0, 7, as.numeric(AT_line_1))) %>%
    mutate(AT = if_else(AT_line_1 >= 7, 0, AT)) %>%
    mutate(AT_line_1  = if_else(AT_line_1  > 7, 7, AT_line_1)) %>%
    mutate(AT_line_1 = if_else(AT_line_1 < 0, 0, AT_line_1))
  
  km <- survfit(Surv(AT_line_1, AT) ~ 1, data = temp.uc, stype = 2)
  km.df <- rbind(km.df,
                 data.frame(time = km$time,
                            cumhaz =  1 - km$surv,
                            class = paste0("FC", g),
                            diag = "UC"))
  
  temp.cd <- temp.cd %>%
    filter(AT == 1)
  
  dens.cd <- density(temp.cd$AT_line_1, kernel = "gaussian", from = 0, to = 7, na.rm = TRUE)
  dens.cd <- data.frame(x = dens.cd$x, y = dens.cd$y)
  dens.cd$CumulativeY <- cumsum(dens.cd$y)
  dens.cd$class <- paste0("FC", g)
  dens.cd.big <- rbind(dens.cd.big,
                       dens.cd)

  temp.uc <- temp.uc %>%
    filter(AT == 1)
  dens.uc <- density(temp.uc$AT_line_1, kernel = "gaussian", from = 0, to = 7, na.rm = TRUE)
  dens.uc <- data.frame(x = dens.uc$x, y = dens.uc$y)
#  dens.uc$y <- dens.uc$y/nrow(temp.uc)
  dens.uc$CumulativeY <- cumsum(dens.uc$y)
  dens.uc$class <- paste0("FC", g)
  dens.uc.big <- rbind(dens.uc.big,
                       dens.uc)
}

dens.cd.big$diag <- "CD"
dens.uc.big$diag <- "UC"

dens <- rbind(dens.cd.big, dens.uc.big)


p1 <- ggplot(dens, aes(x = x, y = y, color = diag, fill = diag)) +
  geom_area(alpha = .5, position = 'identity') +
  geom_line(aes(y = cumhaz, x = time), data = km.df, lty = 2) +
  facet_wrap(~class, ncol = 2) +
  theme_minimal() 
p1
```

w/ trajectories

```{R}
km.df <- data.frame(time = numeric(),
                    cumhaz = numeric(),
                    class = character(),
                    diag = character())

traj.df <- data.frame(prediction = numeric(),
                      time = numeric(),
                      class = character())



time.pred <- seq(0, 7, by = 0.01)

pred.fc.df <- data.frame(
      calpro_time = c(time.pred, time.pred),
      diagnosis = c(
        rep("Crohn's Disease", length(time.pred)),
        rep("Ulcerative Colitis", length(time.pred))
      )
    )
pred.fc.df.update <- lcmm::predictY(model.fc,
                                    pred.fc.df,
                                    var.time = "calpro_time",
                                    draws = TRUE
                                    )$pred

pred <- predictY(model.fc, pred.fc.df, var.time = "calpro_time", draws = TRUE)$pred

pred <- as.data.frame(pred[1:length(time.pred), ])
pred$time <- time.pred


for (g in 1:8) {
  traj <- pred[, c(g, ncol(pred)), ]
  names(traj) <- c("prediction", "time")
  traj$class <- paste0("FC", g)
  traj.df <- rbind(traj.df, traj)
  
  temp.cd <- myDF.fc %>%
    filter(class_order == paste0("FC", g)) %>%
    filter(diagnosis == "Crohn's Disease")

  temp.cd  <- temp.cd  %>%
    mutate(AT_line_1 = if_else(AT == 0, 7, as.numeric(AT_line_1))) %>%
    mutate(AT = if_else(AT_line_1 >= 7, 0, AT)) %>%
    mutate(AT_line_1  = if_else(AT_line_1  > 7, 7, AT_line_1)) %>%
    mutate(AT_line_1 = if_else(AT_line_1 < 0, 0, AT_line_1))
  
  km <- survfit(Surv(AT_line_1, AT) ~ 1, data = temp.cd)
  km.df <- rbind(km.df,
                 data.frame(time = km$time,
                            cumhaz =  1 - km$surv,
                            class = paste0("FC", g),
                            diag = "CD"))
  
  
  temp.uc <- myDF.fc %>%
    filter(class_order == paste0("FC", g)) %>%
    filter(diagnosis == "Ulcerative Colitis")
  

  temp.uc  <- temp.uc  %>%
    mutate(AT_line_1 = if_else(AT == 0, 7, as.numeric(AT_line_1))) %>%
    mutate(AT = if_else(AT_line_1 >= 7, 0, AT)) %>%
    mutate(AT_line_1  = if_else(AT_line_1  > 7, 7, AT_line_1)) %>%
    mutate(AT_line_1 = if_else(AT_line_1 < 0, 0, AT_line_1))
  
  km <- survfit(Surv(AT_line_1, AT) ~ 1, data = temp.uc)
  km.df <- rbind(km.df,
                 data.frame(time = km$time,
                            cumhaz =  1 - km$surv,
                            class = paste0("FC", g),
                            diag = "UC"))
  temp.cd <- temp.cd %>%
    filter(AT == 1)
}

traj.df$class <- plyr::mapvalues(traj.df$class, 
                                 from = paste0("FC", seq(1, 8)),
                                 to = paste0("FC", c(7, 6, 4, 8, 1, 5, 2, 3)))

dens <- rbind(dens.cd.big, dens.uc.big)

p1 <- ggplot(km.df, aes(x = time, y = cumhaz)) +
  geom_line(aes(color = diag, fill = diag), lty = 2) +
  geom_line(aes(x = time, y = prediction/log(2500) ), data = traj.df, color = "black") +
  facet_wrap(~class, ncol = 2) +
  theme_minimal() + 
  scale_y_continuous(name = "Cumulative",
                     
      sec.axis = sec_axis(transform = ~.*log(2500),
                          name = "Log (FC (\u03BCg/g))"))
p1
```



```{R}

dat <- data.frame(Cluster = character(), CD = numeric(), UC = numeric())

    
for (g in 1:8) {
  total <- myDF.fc %>%
    mutate(AT_line_1 = if_else(AT == 0, 7, as.numeric(AT_line_1))) %>%
    mutate(AT = if_else(AT_line_1 >= 7, 0, AT)) %>%
    mutate(AT_line_1  = if_else(AT_line_1  > 7, 7, AT_line_1)) %>%
    mutate(AT_line_1 = if_else(AT_line_1 < 0, 0, AT_line_1)) %>%
    filter(class_order == paste0("FC", g)) %>%
    summarise(CD = sum(diagnosis == "Crohn's Disease"),
              UC = sum(diagnosis == "Ulcerative Colitis"))
    
  therapy <- myDF.fc %>%
    mutate(AT_line_1 = if_else(AT == 0, 7, as.numeric(AT_line_1))) %>%
    mutate(AT = if_else(AT_line_1 >= 7, 0, AT)) %>%
    mutate(AT_line_1  = if_else(AT_line_1  > 7, 7, AT_line_1)) %>%
    mutate(AT_line_1 = if_else(AT_line_1 < 0, 0, AT_line_1)) %>%
    filter(class_order == paste0("FC", g)) %>%
    filter(AT == 1) %>%
    summarise(CD = sum(diagnosis == "Crohn's Disease"),
              UC = sum(diagnosis == "Ulcerative Colitis"))
  
  dat <- rbind(dat,
               data.frame(Cluster = paste0("FC", g),
                          CD = (therapy$CD/total$CD) * 100,
                          UC = (therapy$UC/total$UC) * 100))
}
```

### Demographics table

## CRP

```{R}
model.crp$pprob$class <- plyr::mapvalues(
  model.crp$pprob$class,
  from = c(8, 9),
  to = c(7, 8)
)
```

As Cluster CRP2 and CRP4 are characterised by very similar longitudinal
profiles, we have elected to merge these clusters. All subjects in cluster
4 have been migrated to cluster 2 with clusters 5-9 renumbered accordingly.

Similar to FC, we will explore associations only for subjects with a
sufficiently high posterior probability of being in their assigned cluster. As 
cluster assignment is exclusive, we are able to add the posterior probabilities
for the merged clusters together to determine the posterior probability for
CRP2 after the merge. 

### Sex

```{R}
dict.crp <- subset(dict, ids %in% model.crp$pprob$ids)
dict.crp <- merge(dict.crp, model.crp$pprob[, c("ids", "class")])


crp.median <-
  crp.median %>%
  select(-sex) %>%
  merge(dict.crp[, c("ids", "class", "sex")],
    all.x = TRUE,
    all.y = FALSE
  )

chisq.test(dict.crp$class, dict.crp$sex) %>%
  pander()
```

### Age

Age has been calculated by subtracting year of diagnosis from year of birth. 

```{R}
dict.crp$ageCat <- cut(dict.crp$age,
  breaks = c(0, 18, 30, 50, 70, Inf),
  labels = c("<18", "18-29", "30-49", "50-69", "\u226570"),
  include.lowest = TRUE,
  right = FALSE
)

crp.median <- merge(crp.median,
  dict.crp[, c("ids", "ageCat")],
  by = "ids",
  all.x = TRUE,
  all.y = FALSE
)

aov(class ~ age, data = dict.crp) %>%
  summary() %>%
  pander()
```


```{R}
#| label: fig-crp-age-dist
#| fig-cap: "Distribution of age at diagnosis by CRP cluster assignment."
#| fig-height: 4
#| fig-width: 9.142857
#| warning: false
p2 <- dict.crp %>%
  mutate(class = factor(class, labels = paste("CRP", seq(1, 8)))) %>%
  ggplot(aes(x = class, y = age)) +
  geom_violin(fill = "#D4CDF4", color = "#7A6F9B") +
  theme_minimal() +
  xlab("Cluster") +
  ylab("Age at diagnosis")

p <- p1 / p2 + plot_annotation(tag_levels = "A") &
  theme(plot.tag = element_text(size = 16, face = "bold"))

ggsave("plots/age-dist.png", p, width = 16 * 4 / 7, height = 8)
ggsave("plots/age-dist.pdf", p, width = 16 * 4 / 7, height = 8)
print(p2)
```


### IBD type

As with the FC  model, IBD type has been included in the cluster assignment sub
model as a covariate. Crohn's disease is the reference IBD type with cluster
CRP 8 being the reference cluster. 


```{R}
#| label: fig-crp-ibd
#| fig-cap: "Forest plot of IBD type for the chosen CRP model."
n.clust <- 8
id <- 1:length(model.crp$best)

indice <- rep(id * (id + 1) / 2)

se <- sqrt(model.crp$V[indice])
coefficient <- coef(model.crp)
var.names <- names(coefficient)

df <- data.frame(coefficient = coefficient, se = se)
df <- df[1:(3 * (n.clust - 1)), ]

df$lower <- df$coefficient - (qnorm(0.975) * df$se)
df$upper <- df$coefficient + (qnorm(0.975) * df$se)
df$labels <- names(coefficient)[1:(3 * (n.clust - 1))]

df$labels <- factor(df$labels, levels = rev(df$labels))

df$sig <- FALSE

df[df$upper < 0, "sig"] <- TRUE
df[df$lower > 0, "sig"] <- TRUE

df <- df[n.clust:(3 * (n.clust - 1)), ] # Remove intercept

df %>%
  ggplot(aes(
    x = labels,
    y = coefficient,
    ymin = lower,
    ymax = upper,
    color = sig
  )) +
  geom_errorbar() +
  geom_point(size = 3.5) +
  geom_hline(yintercept = 0, lty = 2) +
  coord_flip() + # flip coordinates (puts labels on y axis)
  xlab("") +
  ylab("Estimate (95% CI)") +
  theme_bw() +
  ylim(-4, 4) +
  scale_color_manual(values = c("black", "#FF007F")) +
  theme(legend.position = "none")
```

```{R}
#| label: tbl-crp-ibd
#| fig-cap: "Table of β estimates and associated p-values obtained via univariate Wald tests."
wald <- c()
p.vals <- c()

for (index in seq(n.clust, 3 * (n.clust - 1))) {
  temp <- WaldMult(model.crp, pos = index)
  wald <- c(wald, temp[, 1])
  p.vals <- c(p.vals, temp[, 2])
}

df$wald <- wald
df$p.vals <- p.vals

rownames(df) <- df$labels

df %>%
  select(coefficient, se, wald, p.vals) %>%
  knitr::kable(digits = 3, col.names = c("Estimate", "SE", "Wald", "p-value"))
```

```{R}
dict.crp$diagnosis <- factor(dict.crp$diagnosis,
  levels = c(
    "Crohn's Disease",
    "Ulcerative Colitis",
    "IBDU"
  )
)

dict.crp$class <- factor(dict.crp$class,
  levels = seq(1, 8),
  labels = paste0("CRP ", seq(1, 8))
)

p2 <- dict.crp %>%
  ggplot() +
  geom_mosaic(aes(x = product(class), fill = diagnosis), show.legend = FALSE) +
  scale_fill_manual(values = c("#F8766D", "#619CFF", "#00BA38")) +
  theme_minimal() +
  labs(
    x = "Cluster",
    y = "IBD type"
  ) +
  ggtitle(
    "IBD type",
    "CRP clustering"
  )

ggsave("plots/mosaic/crp-by-diag.png",
  p2,
  width = 7.5,
  height = 5,
  units = "in",
  dpi = 300,
  create.dir = TRUE
)
ggsave("plots/mosaic/crp-by-diag.pdf", p2, width = 7.5, height = 5)

p6 <- dict.crp %>%
  ggplot(aes(x = class, fill = diagnosis, color = diagnosis)) +
  geom_bar(position = "fill") +
  scale_fill_manual(values = c("#F8766D", "#619CFF", "#00BA38")) +
  scale_color_manual(values = c("#CF544B", "#417BD2", "#01932A")) +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_y_continuous(labels = scales::percent) +
  labs(
    x = "Cluster",
    y = "",
    fill = "IBD type",
    color = "IBD type"
  )
p6
```

```{R}
#| label: fig-crp-ibd-facet
#| fig-cap: "Percentage of (A) Crohn's disease, (B) ulcerative colitis, and (C) IBDU within each CRP cluster. Dotted lines indicate the overall percentage of each IBD type."
perc.table <- data.frame(
  diagnosis = character(),
  cluster = character(),
  perc = numeric()
)
for (g in 1:8) {
  temp.1 <- subset(dict.crp, class == paste0("CRP ", g))
  for (diag in c("Crohn's Disease", "Ulcerative Colitis", "IBDU")) {
    perc <- nrow(subset(temp.1, diagnosis == diag)) / nrow(temp.1)
    perc.table <- rbind(
      perc.table,
      data.frame(
        diagnosis = diag,
        cluster = paste0("CRP ", g),
        perc = perc
      )
    )
  }
}

totalCdPerc <- nrow(subset(dict.crp, diagnosis == "Crohn's Disease")) /
  nrow(dict.crp)

p1 <- perc.table %>%
  filter(diagnosis == "Crohn's Disease") %>%
  ggplot(aes(x = cluster, y = perc)) +
  geom_bar(stat = "identity", fill = "#F8766D", color = "#CF544B") +
  geom_hline(yintercept = totalCdPerc, linetype = "dashed", color = "#4D4730") +
  theme_minimal() +
  labs(x = "Cluster", y = "Percentage")

totalCdPerc <- nrow(subset(dict.crp, diagnosis == "Ulcerative Colitis")) /
  nrow(dict.crp)

p2 <- perc.table %>%
  filter(diagnosis == "Ulcerative Colitis") %>%
  ggplot(aes(x = cluster, y = perc)) +
  geom_bar(stat = "identity", fill = "#619CFF", color = "#417BD2") +
  geom_hline(yintercept = totalCdPerc, linetype = "dashed", color = "#4D4730") +
  theme_minimal() +
  labs(x = "Cluster", y = "Percentage")


totalCdPerc <- nrow(subset(dict.crp, diagnosis == "IBDU")) /
  nrow(dict.crp)

p3 <- perc.table %>%
  filter(diagnosis == "IBDU") %>%
  ggplot(aes(x = cluster, y = perc)) +
  geom_bar(stat = "identity", fill = "#00BA38", color = "#01932A") +
  geom_hline(yintercept = totalCdPerc, linetype = "dashed", color = "#4D4730") +
  theme_minimal() +
  labs(x = "Cluster", y = "Percentage")

p <- p1 / p2 / p3 + patchwork::plot_annotation(tag_levels = "A")  &
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) 
ggsave("plots/ibd-type-crp.png", p, width = 7.5, height = 7.5)
ggsave("plots/ibd-type-crp.pdf", p, width = 7.5, height = 7.5)
print(p)
```

### Advanced therapy in CD

```{R}
dict.crp.cd <- readRDS(paste0(prefix, "processed/dict-crp-cd.RDS"))

dict.crp.cd <- merge(dict.crp.cd,
  dict.crp[, c("ids", "class")],
  by = "ids",
  all.x = TRUE,
  all.y = FALSE
)
```



```{R}
pred.crp.df <- data.frame(
  crp_time = c(seq(0, 6.25, 0.01), seq(0, 6.25, 0.01)),
  diagnosis = c(
    rep("Crohn's Disease", 626),
    rep("Ulcerative Colitis", 626)
  )
)
pred.crp.df.update <- predictY(model.crp, pred.crp.df,
  var.time = "crp_time",
  draws = TRUE
)$pred

temp <- data.frame(Time = NULL, Cluster = NULL, Value = NULL)

for (g in 1:8) {
  temp <- rbind(
    temp,
    data.frame(
      Time = seq(0, 6.25, 0.01),
      Cluster = g,
      Value = pred.crp.df.update[, g]
    )
  )
}


dict.crp.cd$timeToTherapy <- with(dict.crp.cd, startDate - date.of.diag) / 365.25

for (g in 1:8) {
  p1 <- temp %>%
    filter(Cluster == g) %>%
    ggplot(aes(x = Time, y = Value)) +
    geom_line(color = "#558C8C") +
    theme_minimal() +
    ylim(0, 6) +
    xlab("") +
    ylab("Log (CRP (\u03BCg/mL))")
  p2 <- dict.crp.cd %>%
    filter(class == paste0("CRP ", g)) %>%
    filter(timeToTherapy > 0) %>%
    ggplot(aes(x = timeToTherapy)) +
    geom_density(color = "#5D002F", fill = "#82204A") +
    theme_minimal() +
    xlim(0, 7) +
    ylim(0, NA) +
    xlab("Time") +
    ylab("Density of time to first advanced therapy")
  p <- p1 / p2 + plot_annotation(
    title = paste("CRP ", g),
    subtitle = "Crohn's disease",
    tag_levels = "A"
  )
  ggsave(paste0("plots/at-density-crp/g=", g, ".png"),
    p,
    width = 7,
    height = 7,
    units = "in",
    create.dir = TRUE
  )
  print(p)
}
```

```{R}
temp <- dict.crp.cd %>%
  mutate(timeToTherapy = if_else(advancedT == 1, 7, as.numeric(timeToTherapy))) %>%
  mutate(advancedT = if_else(advancedT == 1, 0, 1)) %>%
  mutate(advancedT = if_else(timeToTherapy > 7, 0, 1)) %>%
  mutate(timeToTherapy = if_else(timeToTherapy > 7, 7, timeToTherapy))
survfit(Surv(timeToTherapy, advancedT) ~ class, data = temp) %>%
  ggsurvplot(pval = TRUE)
```

```{R}
#| echo: false
png("plots/at-survival-crp-ci.png",
  width = 7,
  height = 5,
  units = "in",
  res = 300
)
survfit(Surv(timeToTherapy, advancedT) ~ class, data = temp) %>%
  ggsurvplot(pval = TRUE, conf.int = TRUE)
invisible(dev.off())
```


```{R}
p <- dict.crp.cd %>%
  ggplot() +
  geom_mosaic(aes(x = product(class), fill = firstY), show.legend = FALSE) +
  theme_minimal() +
  labs(
    x = "Cluster",
    y = "Advanced therapy within first year of diagnosis"
  ) +
  ggtitle(
    "Crohn's disease subjects",
    "CRP clustering"
  )
ggsave("plots/mosaic/crp-cd.png",
  p,
  width = 7.5,
  height = 5,
  units = "in",
  dpi = 300,
  create.dir = TRUE
)
ggsave("plots/mosaic/crp-cd.pdf", p, width = 7.5, height = 5)
p
```

```{R}
pred.crp.df <- data.frame(
  crp_time = c(seq(0, 7, 0.01), seq(0, 7, 0.01)),
  diagnosis = c(
    rep("Crohn's Disease", 701),
    rep("Ulcerative Colitis", 701)
  )
)
pred.crp.df.update <- predictY(model.crp, pred.crp.df,
  var.time = "crp_time",
  draws = TRUE
)$pred

temp <- data.frame(Time = NULL, Cluster = NULL, Value = NULL)

for (g in 1:8) {
  temp <- rbind(
    temp,
    data.frame(
      Time = seq(0, 7, 0.01),
      Cluster = g,
      Value = pred.crp.df.update[, g]
    )
  )
}

traj.crp.outlines <- list()

for (g in 1:8) {
  traj.crp.outlines[[g]] <- temp %>%
    filter(Cluster == g) %>%
    ggplot(aes(x = Time, y = Value)) +
    geom_line(color = "#757575") +
    theme_classic() +
    theme(
      text = element_blank(),
      axis.ticks = element_blank(),
      axis.line = element_line(color = "#dfdfdf")
    ) +
    ylim(0, 6)
}


p1 <- dict.crp.cd %>%
  ggplot(aes(x = class, fill = firstY, color = firstY)) +
  geom_bar(position = "fill") +
  scale_fill_manual(values = c("#F8766D", "#619CFF")) +
  scale_color_manual(values = c("#CF544B", "#417BD2")) +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_y_continuous(labels = scales::percent) +
  labs(
    x = "Cluster",
    y = "",
    fill = desc,
    color = desc
  )


p <- (p1) /
  (traj.crp.outlines[[1]] +
    traj.crp.outlines[[2]] +
    traj.crp.outlines[[3]] +
    traj.crp.outlines[[4]] +
    traj.crp.outlines[[5]] +
    traj.crp.outlines[[6]] +
    traj.crp.outlines[[7]] +
    traj.crp.outlines[[8]] +
    plot_layout(ncol = 8, guides = "collect", widths = unit(2.8, "cm"))) +
  plot_layout(heights = c(4, 1), nrow = 2)

ggsave("plots/mosaic/crp-by-AT-with-traj.pdf",
  p,
  width = 7 * 1.65,
  height = 5 * 1.65
)
ggsave("plots/mosaic/crp-by-AT-with-traj.png",
  p,
  width = 7 * 1.65,
  height = 5 * 1.65
)
```

### Mutlivariate modelling

```{R}
mlr <- multinom(class ~ age + sex + diagnosis, data = dict.crp, trace = FALSE)
z <- summary(mlr)$coefficients / summary(mlr)$standard.errors
p <- (1 - pnorm(abs(z), 0, 1)) * 2
knitr::kable(p)
```

### Demographics table

## Reuse {.appendix}

Licensed by 
<a href="https://creativecommons.org/licenses/by/4.0/">CC BY</a>
 unless otherwise stated.
 
## {.appendix}

<div class = "center">
  <img class = "center" src="../../images/MRC_HGU_Edinburgh RGB.png" alt="MRC Human Genetics Unit logo" height = 50px>
  <img src="../../images/cgem-logo.png" alt="Centre for Genomic & Experimental Medicine logo" height = 50px>
</div>

---

## Session info {.appendix}

```{R Session info}
pander(sessionInfo())
```


